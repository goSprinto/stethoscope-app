name: Package application

on:
  workflow_dispatch:
    inputs:
      stethoscope_repo_branch_name:
        description: Branch name of Stethoscope Repository
        required: true
        type: string

jobs:
  # build-and-package-macos:
  #   runs-on: macos-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         repository: goSprinto/stethoscope-app
  #         ref: ${{ github.event.inputs.stethoscope_repo_branch_name }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.14.0'

  #     - name: Install dependencies
  #       run: yarn install

  #     - name: Cache dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           node_modules
  #           ${{ runner.home }}/.cache/electron
  #           ${{ runner.home }}/.cache/electron-builder
  #         key: macos-latest-dependencies-${{ hashFiles('**/yarn.lock') }}

  #     - name: Build and Package for macOS
  #       run: |
  #         yarn run-s prebuild 'build:electron -m --x64 --arm64'

  #     - name: Codesign executable
  #       env: 
  #         MACOS_CERTIFICATE: ${{ secrets.MACP12 }}
  #         MACOS_CERTIFICATE_PWD: ${{ secrets.MACP12PASS }}
  #         MACOS_TEAMID: ${{ secrets.MACTEAMID }}
  #       run: |
  #         base64 -d <<< "$MACOS_CERTIFICATE" > certificate.p12
  #         security create-keychain -p Test@123 build.keychain
  #         security default-keychain -s build.keychain
  #         security unlock-keychain -p Test@123 build.keychain
  #         security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k Test@123 build.keychain
          
  #         for dmg_file in dist/*.dmg; do
  #           /usr/bin/codesign --force -s "$MACOS_TEAMID" "$dmg_file" -v
  #           codesign -v "$dmg_file" --verbose
  #         done

  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Dist-macos
  #         path: dist
  
  # build-and-package-ubuntu:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         repository: goSprinto/stethoscope-app
  #         ref: ${{ github.event.inputs.stethoscope_repo_branch_name }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.14.0'

  #     - name: Install dependencies
  #       run: yarn install -y

  #     - name: Cache dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           node_modules
  #           ${{ runner.home }}/.cache/electron
  #           ${{ runner.home }}/.cache/electron-builder
  #         key: ubuntu-latest-dependencies-${{ hashFiles('**/yarn.lock') }}

  #     - name: Cleanup old cache
  #       if: runner.os == 'ubuntu-latest'
  #       run: rm -rf ${{ runner.home }}/.cache/electron-builder/wine

  #     - name: Build and Package for Ubuntu
  #       run: |
  #         yarn run-s prebuild _electron-builder-linux
  #     - name: Print the name of appimages
  #       run: |
  #         ls dist/
     
  #     - name: Convert X64 AppImage to static runtime
  #       run: |
  #         sudo apt install desktop-file-utils
  #         cd dist
  #         appimage="DrSprinto-4.0.8.AppImage"
  #         wget "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage" -O ./appimagetool.AppImage
  #         chmod +x ./"$appimage" ./appimagetool.AppImage
  #         ./"$appimage" --appimage-extract && rm -f ./"$appimage"
  #         ./appimagetool.AppImage --comp zstd --mksquashfs-opt -Xcompression-level --mksquashfs-opt 20 \
  #           -n ./squashfs-root ./"$appimage"
  #         rm -rf ./squashfs-root ./appimagetool.AppImage
      
  #     - name: Post Print the name of appimages
  #       run: |
  #         ls dist/
            
  #     - name: Save artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Dist-ubuntu
  #         path: dist

  build-and-package-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: goSprinto/stethoscope-app
          ref: ${{ github.event.inputs.stethoscope_repo_branch_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Install dependencies
        run: yarn install

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ runner.home }}/.cache/electron
            ${{ runner.home }}/.cache/electron-builder
          key: windows-latest-dependencies-${{ hashFiles('**/yarn.lock') }}

      - name: Cleanup old cache
        if: runner.os == 'ubuntu-latest'
        run: rm -rf ${{ runner.home }}/.cache/electron-builder/wine

      - name: Build and Package for Windows
        shell: powershell
        env:
          WINDOZE_CERT_DATA: ${{ secrets.P12FILE }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          $cert_data = $env:WINDOZE_CERT_DATA
          $cert_path = "$temp_dir\lando.windoze.p12"
          $cert_password = $env:WINDOZE_CERT_PASSWORD
          $cert_secure_password = $null
          $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe"
          $signtool2022 = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe"
          If (!(Test-Path $cert_path)) {
            Write-Output "Dumping cert to $cert_path..."
            $bytes = [Convert]::FromBase64String($cert_data)
            [IO.File]::WriteAllBytes($cert_path, $bytes)
          }
          If (Test-Path $signtool2022) {
            $signtool = "$signtool2022"
          }
          # Verify the cert and password are good
          Write-Output "Verifying cert is good to go..."
          $cert_secure_password = ConvertTo-SecureString $cert_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "$cert_path" -Password $cert_secure_password -CertStoreLocation "Cert:\LocalMachine\My"
          # If we get this far we should be good!
          yarn run-s prebuild 'build:electron -w --x64'
          # Sign DLLs before packaging
          $dll_files = Get-ChildItem -Path dist/win-unpacked -Filter *.dll
          foreach ($dll_file in $dll_files) {
            dll_file_path = -join($pwd, "/", "dist/win-unpacked/", $dll_file);
            & $signtool sign -f "$cert_path" -p "$cert_password" -fd sha256 /sha1 ${{ secrets.SHA1KEY }} -tr "http://timestamp.comodoca.com/?td=sha256" -td sha256 $env:OPTIONS -as -v $dll_file_path
          }
          # Continue with packaging
          yarn electron-builder --win

      - name: Sign the build
        shell: powershell
        env:
          WINDOZE_CERT_DATA: ${{ secrets.P12FILE }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          # Get some things for cert opts
          $version = (Get-Content package.json | ConvertFrom-Json).version
          $file = -join($pwd, "/", "dist/DrSprinto Setup ",$version,".exe");
          $temp_dir = $env:TMP
          $cert_data = $env:WINDOZE_CERT_DATA
          $cert_path = "$temp_dir\lando.windoze.p12"
          $cert_password = $env:WINDOZE_CERT_PASSWORD
          $cert_secure_password = $null
          $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe"
          $signtool2022 = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe"
          # Throw error if file does not exist
          if (!(Test-Path "$file"))
          {
            throw "$file does not exist"
          }
          # Decode and dump to temp file
          If (!(Test-Path $cert_path)) {
            Write-Output "Dumping cert to $cert_path..."
            $bytes = [Convert]::FromBase64String($cert_data)
            [IO.File]::WriteAllBytes($cert_path, $bytes)
          }
          # Use more recent signtool if we can
          If (Test-Path $signtool2022) {
            $signtool = "$signtool2022"
          }
          # Verify the cert and password are good
          Write-Output "Verifying cert is good to go..."
          $cert_secure_password = ConvertTo-SecureString $cert_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "$cert_path" -Password $cert_secure_password -CertStoreLocation "Cert:\LocalMachine\My"
          # If we get this far we should be good!
          Write-Output "We can sign!"
          # Sign
          Write-Output "Trying to sign $file with $signtool..."
          & $signtool sign -f "$cert_path" -p "$cert_password" -fd sha256 /sha1 ${{ secrets.SHA1KEY }} -tr "http://timestamp.comodoca.com/?td=sha256" -td sha256 $env:OPTIONS -as -v "$file"

        
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Dist-windows
          path: dist

  # upload-to-s3:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   needs: [build-and-package-macos,build-and-package-ubuntu,build-and-package-windows]
    
  #   steps:
  #     - name: Configure AWS
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::426216900398:role/github-actions-sprinto-repo-role
  #         aws-region: us-west-1
    
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist
  #         pattern: Dist-*
  #         merge-multiple: true
  
  #     - name: Push artifacts to S3
  #       run: |
  #           mkdir artifacts && \
  #           cp dist/*.{yml,exe,dmg,AppImage} artifacts/ && \
  #           aws s3 sync artifacts s3://drsprinto-build/${{ github.event.inputs.stethoscope_repo_branch_name }}
